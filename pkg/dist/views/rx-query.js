"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RxQuery;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _lodash = _interopRequireDefault(require("lodash.flattendeep"));

var _objectHash = _interopRequireDefault(require("object-hash"));

var _createSubject = _interopRequireDefault(require("./create-subject"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function RxQuery(proto) {
  Object.assign(proto, {
    ensure$(...properties) {
      if (!this.collection.options || !this.collection.options.views) {
        throw Error('RxQuery.ensure$() can only be used on collection with defined views');
      }

      properties = (0, _lodash.default)(properties);
      if (!properties.length) properties = this.collection._views;
      const ensureHash = (0, _objectHash.default)(properties, {
        unorderedArrays: true
      });
      let ensures = this[_constants.ENSURE_SYMBOL];
      if (!ensures) ensures = this[_constants.ENSURE_SYMBOL] = {};
      let obs = ensures[ensureHash];
      if (!obs) obs = ensures[ensureHash] = createEnsure(this.$, properties);
      return obs;
    }

  });
}

function createEnsure(observable, properties) {
  let unensureFns = {};
  let lastDocs;
  const obs = observable.pipe((0, _operators.switchMap)(ans => {
    if (!ans) return (0, _rxjs.of)(ans);
    const docs = Array.isArray(ans) ? ans : [ans];
    const rxArr = [];
    lastDocs = docs;
    docs.forEach(doc => {
      const primary = doc.primary;
      if (unensureFns[primary]) return;

      const unensure = doc[_constants.ENSURE_SYMBOL](properties);

      unensureFns[primary] = unensure;
      properties.forEach(property => {
        rxArr.push(doc[property].$);
      });
    });
    return rxArr.length ? (0, _rxjs.combineLatest)(...rxArr).pipe((0, _operators.take)(1), (0, _operators.map)(() => ans)) : (0, _rxjs.of)(ans);
  }));
  let interval;
  let lastCleanupDocs;
  return (0, _createSubject.default)(obs, {
    onInit() {
      // Periodic cleanup of ensured docs that are not part of the
      // query response anymore
      interval = setInterval(() => {
        if (!lastDocs || lastCleanupDocs === lastDocs) return;
        lastCleanupDocs = lastDocs;
        const primaries = lastCleanupDocs.reduce((acc, doc) => {
          acc[doc.primary] = true;
          return acc;
        }, {});
        Object.keys(unensureFns).forEach(key => {
          if (primaries[key]) return;
          unensureFns[key]();
          delete unensureFns[key];
        });
      }, _constants.ENSURE_CLEANUP_TIMEOUT);
    },

    onTeardown() {
      const fns = unensureFns;
      unensureFns = {};
      lastDocs = null;
      lastCleanupDocs = null;
      clearInterval(interval);
      Object.values(fns).forEach(fn => fn());
    }

  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92aWV3cy9yeC1xdWVyeS5qcyJdLCJuYW1lcyI6WyJSeFF1ZXJ5IiwicHJvdG8iLCJPYmplY3QiLCJhc3NpZ24iLCJlbnN1cmUkIiwicHJvcGVydGllcyIsImNvbGxlY3Rpb24iLCJvcHRpb25zIiwidmlld3MiLCJFcnJvciIsImxlbmd0aCIsIl92aWV3cyIsImVuc3VyZUhhc2giLCJ1bm9yZGVyZWRBcnJheXMiLCJlbnN1cmVzIiwiRU5TVVJFX1NZTUJPTCIsIm9icyIsImNyZWF0ZUVuc3VyZSIsIiQiLCJvYnNlcnZhYmxlIiwidW5lbnN1cmVGbnMiLCJsYXN0RG9jcyIsInBpcGUiLCJhbnMiLCJkb2NzIiwiQXJyYXkiLCJpc0FycmF5IiwicnhBcnIiLCJmb3JFYWNoIiwiZG9jIiwicHJpbWFyeSIsInVuZW5zdXJlIiwicHJvcGVydHkiLCJwdXNoIiwiaW50ZXJ2YWwiLCJsYXN0Q2xlYW51cERvY3MiLCJvbkluaXQiLCJzZXRJbnRlcnZhbCIsInByaW1hcmllcyIsInJlZHVjZSIsImFjYyIsImtleXMiLCJrZXkiLCJFTlNVUkVfQ0xFQU5VUF9USU1FT1VUIiwib25UZWFyZG93biIsImZucyIsImNsZWFySW50ZXJ2YWwiLCJ2YWx1ZXMiLCJmbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRWUsU0FBU0EsT0FBVCxDQUFpQkMsS0FBakIsRUFBd0I7QUFDckNDLEVBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjRixLQUFkLEVBQXFCO0FBQ25CRyxJQUFBQSxPQUFPLENBQUMsR0FBR0MsVUFBSixFQUFnQjtBQUNyQixVQUFJLENBQUMsS0FBS0MsVUFBTCxDQUFnQkMsT0FBakIsSUFBNEIsQ0FBQyxLQUFLRCxVQUFMLENBQWdCQyxPQUFoQixDQUF3QkMsS0FBekQsRUFBZ0U7QUFDOUQsY0FBTUMsS0FBSyxDQUNULHFFQURTLENBQVg7QUFHRDs7QUFDREosTUFBQUEsVUFBVSxH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Y0FBSUosU0FBUyxDQUFDSSxHQUFELENBQWIsRUFBb0I7QUFFcEJ0QixVQUFBQSxXQUFXLENBQUNzQixHQUFELENBQVg7QUFDQSxpQkFBT3RCLFdBQVcsQ0FBQ3NCLEdBQUQsQ0FBbEI7QUFDRCxTQUxEO0FBTUQsT0FmcUIsRUFlbkJDLGlDQWZtQixDQUF0QjtBQWdCRCxLQXBCdUI7O0FBcUJ4QkMsSUFBQUEsVUFBVSxHQUFHO0FBQ1gsWUFBTUMsR0FBRyxHQUFHekIsV0FBWjtBQUNBQSxNQUFBQSxXQUFXLEdBQUcsRUFBZDtBQUNBQyxNQUFBQSxRQUFRLEdBQUcsSUFBWDtBQUNBYyxNQUFBQSxlQUFlLEdBQUcsSUFBbEI7QUFDQVcsTUFBQUEsYUFBYSxDQUFDWixRQUFELENBQWI7QUFDQWhDLE1BQUFBLE1BQU0sQ0FBQzZDLE1BQVAsQ0FBY0YsR0FBZCxFQUFtQmpCLE9BQW5CLENBQTRCb0IsRUFBRCxJQUFRQSxFQUFFLEVBQXJDO0FBQ0Q7O0FBNUJ1QixHQUFuQixDQUFQO0FBOEJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb2YsIGNvbWJpbmVMYXRlc3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgbWFwLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IGZsYXR0ZW5EZWVwIGZyb20gJ2xvZGFzaC5mbGF0dGVuZGVlcCc7XG5pbXBvcnQgaGFzaCBmcm9tICdvYmplY3QtaGFzaCc7XG5pbXBvcnQgY3JlYXRlU3ViamVjdCBmcm9tICcuL2NyZWF0ZS1zdWJqZWN0JztcbmltcG9ydCB7IEVOU1VSRV9DTEVBTlVQX1RJTUVPVVQsIEVOU1VSRV9TWU1CT0wgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJ4UXVlcnkocHJvdG8pIHtcbiAgT2JqZWN0LmFzc2lnbihwcm90bywge1xuICAgIGVuc3VyZSQoLi4ucHJvcGVydGllcykge1xuICAgICAgaWYgKCF0aGlzLmNvbGxlY3Rpb24ub3B0aW9ucyB8fCAhdGhpcy5jb2xsZWN0aW9uLm9wdGlvbnMudmlld3MpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgJ1J4UXVlcnkuZW5zdXJlJCgpIGNhbiBvbmx5IGJlIHVzZWQgb24gY29sbGVjdGlvbiB3aXRoIGRlZmluZWQgdmlld3MnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwcm9wZXJ0aWVzID0gZmxhdHRlbkRlZXAocHJvcGVydGllcyk7XG4gICAgICBpZiAoIXByb3BlcnRpZXMubGVuZ3RoKSBwcm9wZXJ0aWVzID0gdGhpcy5jb2xsZWN0aW9uLl92aWV3cztcblxuICAgICAgY29uc3QgZW5zdXJlSGFzaCA9IGhhc2gocHJvcGVydGllcywgeyB1bm9yZGVyZWRBcnJheXM6IHRydWUgfSk7XG5cbiAgICAgIGxldCBlbnN1cmVzID0gdGhpc1tFTlNVUkVfU1lNQk9MXTtcbiAgICAgIGlmICghZW5zdXJlcykgZW5zdXJlcyA9IHRoaXNbRU5TVVJFX1NZTUJPTF0gPSB7fTtcblxuICAgICAgbGV0IG9icyA9IGVuc3VyZXNbZW5zdXJlSGFzaF07XG4gICAgICBpZiAoIW9icykgb2JzID0gZW5zdXJlc1tlbnN1cmVIYXNoXSA9IGNyZWF0ZUVuc3VyZSh0aGlzLiQsIHByb3BlcnRpZXMpO1xuXG4gICAgICByZXR1cm4gb2JzO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVuc3VyZShvYnNlcnZhYmxlLCBwcm9wZXJ0aWVzKSB7XG4gIGxldCB1bmVuc3VyZUZucyA9IHt9O1xuICBsZXQgbGFzdERvY3M7XG5cbiAgY29uc3Qgb2JzID0gb2JzZXJ2YWJsZS5waXBlKFxuICAgIHN3aXRjaE1hcCgoYW5zKSA9PiB7XG4gICAgICBpZiAoIWFucykgcmV0dXJuIG9mKGFucyk7XG5cbiAgICAgIGNvbnN0IGRvY3MgPSBBcnJheS5pc0FycmF5KGFucykgPyBhbnMgOiBbYW5zXTtcbiAgICAgIGNvbnN0IHJ4QXJyID0gW107XG4gICAgICBsYXN0RG9jcyA9IGRvY3M7XG5cbiAgICAgIGRvY3MuZm9yRWFjaCgoZG9jKSA9PiB7XG4gICAgICAgIGNvbnN0IHByaW1hcnkgPSBkb2MucHJpbWFyeTtcbiAgICAgICAgaWYgKHVuZW5zdXJlRm5zW3ByaW1hcnldKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgdW5lbnN1cmUgPSBkb2NbRU5TVVJFX1NZTUJPTF0ocHJvcGVydGllcyk7XG4gICAgICAgIHVuZW5zdXJlRm5zW3ByaW1hcnldID0gdW5lbnN1cmU7XG4gICAgICAgIHByb3BlcnRpZXMuZm9yRWFjaCgocHJvcGVydHkpID0+IHtcbiAgICAgICAgICByeEFyci5wdXNoKGRvY1twcm9wZXJ0eV0uJCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByeEFyci5sZW5ndGhcbiAgICAgICAgPyBjb21iaW5lTGF0ZXN0KC4uLnJ4QXJyKS5waXBlKFxuICAgICAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgICAgIG1hcCgoKSA9PiBhbnMpXG4gICAgICAgICAgKVxuICAgICAgICA6IG9mKGFucyk7XG4gICAgfSlcbiAgKTtcblxuICBsZXQgaW50ZXJ2YWw7XG4gIGxldCBsYXN0Q2xlYW51cERvY3M7XG5cbiAgcmV0dXJuIGNyZWF0ZVN1YmplY3Qob2JzLCB7XG4gICAgb25Jbml0KCkge1xuICAgICAgLy8gUGVyaW9kaWMgY2xlYW51cCBvZiBlbnN1cmVkIGRvY3MgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlXG4gICAgICAvLyBxdWVyeSByZXNwb25zZSBhbnltb3JlXG4gICAgICBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgaWYgKCFsYXN0RG9jcyB8fCBsYXN0Q2xlYW51cERvY3MgPT09IGxhc3REb2NzKSByZXR1cm47XG5cbiAgICAgICAgbGFzdENsZWFudXBEb2NzID0gbGFzdERvY3M7XG4gICAgICAgIGNvbnN0IHByaW1hcmllcyA9IGxhc3RDbGVhbnVwRG9jcy5yZWR1Y2UoKGFjYywgZG9jKSA9PiB7XG4gICAgICAgICAgYWNjW2RvYy5wcmltYXJ5XSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwge30pO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHVuZW5zdXJlRm5zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICBpZiAocHJpbWFyaWVzW2tleV0pIHJldHVybjtcblxuICAgICAgICAgIHVuZW5zdXJlRm5zW2tleV0oKTtcbiAgICAgICAgICBkZWxldGUgdW5lbnN1cmVGbnNba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBFTlNVUkVfQ0xFQU5VUF9USU1FT1VUKTtcbiAgICB9LFxuICAgIG9uVGVhcmRvd24oKSB7XG4gICAgICBjb25zdCBmbnMgPSB1bmVuc3VyZUZucztcbiAgICAgIHVuZW5zdXJlRm5zID0ge307XG4gICAgICBsYXN0RG9jcyA9IG51bGw7XG4gICAgICBsYXN0Q2xlYW51cERvY3MgPSBudWxsO1xuICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICBPYmplY3QudmFsdWVzKGZucykuZm9yRWFjaCgoZm4pID0+IGZuKCkpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=