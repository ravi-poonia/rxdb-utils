"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RxDocument;

var _uuid = require("uuid");

var _operators = require("rxjs/operators");

var _createSubject = _interopRequireDefault(require("./create-subject"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function RxDocument(proto, viewsArr) {
  // Define getters for views
  Object.defineProperties(proto, viewsArr.reduce((acc, [key, {
    get
  }]) => {
    acc[key] = {
      get() {
        let ans = this[_constants.OBSERVABLES_SYMBOL][key];
        if (ans) return ans;
        const getObs = get.bind(this);
        ans = this[_constants.OBSERVABLES_SYMBOL][key] = createView(getObs);
        return ans;
      },

      enumerable: true
    };
    return acc;
  }, {}));
  Object.assign(proto, {
    [_constants.ENSURE_SYMBOL]: function ensure(propertyNames) {
      if (!propertyNames.length) propertyNames = this.collection._views;
      const unensureFns = [];
      propertyNames.forEach(property => {
        unensureFns.push(this[property][_constants.ENSURE_SYMBOL]());
      });

      function unensure() {
        unensureFns.forEach(fn => fn());
      }

      return unensure;
    }
  });
}

function createView(getObs) {
  const obj = {};
  let value;
  let observable;
  let ensured = false;
  const ensuredIds = {};
  Object.defineProperties(obj, {
    [_constants.ENSURE_SYMBOL]: {
      value: function ensure() {
        const id = (0, _uuid.v4)();
        ensured = true;
        ensuredIds[id] = true;
        return function unensure() {
          ensured = null;
          delete ensuredIds[id];
        };
      },
      enumerable: true
    },
    ensured: {
      get() {
        if (ensured === null) ensured = Boolean(Object.keys(ensuredIds).length);
        return ensured;
      },

      enumerable: true
    },
    $: {
      get() {
        if (!observable) {
          const obs = getObs().pipe((0, _operators.tap)(res => obj.ensured && (value = res)));
          observable = (0, _createSubject.default)(obs, {
            keepOpenCheck: () => obj.ensured
          });
        }

        return observable;
      },

      enumerable: true
    },
    promise: {
      get() {
        return obj.$.pipe((0, _operators.take)(1)).toPromise();
      },

      enumerable: true
    },
    exec: {
      value: function exec() {
        return getObs().pipe((0, _operators.take)(1)).toPromise();
      },
      enumerable: true
    },
    value: {
      get() {
        if (!obj.ensured) {
          throw Error('Tried to get an view value for RxDocument not part of an ensure$() query');
        }

        return value;
      },

      enumerable: true
    }
  });
  return obj;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92aWV3cy9yeC1kb2N1bWVudC5qcyJdLCJuYW1lcyI6WyJSeERvY3VtZW50IiwicHJvdG8iLCJ2aWV3c0FyciIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJyZWR1Y2UiLCJhY2MiLCJrZXkiLCJnZXQiLCJhbnMiLCJPQlNFUlZBQkxFU19TWU1CT0wiLCJnZXRPYnMiLCJiaW5kIiwiY3JlYXRlVmlldyIsImVudW1lcmFibGUiLCJhc3NpZ24iLCJFTlNVUkVfU1lNQk9MIiwiZW5zdXJlIiwicHJvcGVydHlOYW1lcyIsImxlbmd0aCIsImNvbGxlY3Rpb24iLCJfdmlld3MiLCJ1bmVuc3VyZUZucyIsImZvckVhY2giLCJwcm9wZXJ0eSIsInB1c2giLCJ1bmVuc3VyZSIsImZuIiwib2JqIiwidmFsdWUiLCJvYnNlcnZhYmxlIiwiZW5zdXJlZCIsImVuc3VyZWRJZHMiLCJpZCIsIkJvb2xlYW4iLCJrZXlzIiwiJCIsIm9icyIsInBpcGUiLCJyZXMiLCJrZWVwT3BlbkNoZWNrIiwicHJvbWlzZSIsInRvUHJvbWlzZSIsImV4ZWMiLCJFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRWUsU0FBU0EsVUFBVCxDQUFvQkMsS0FBcEIsRUFBMkJDLFFBQTNCLEVBQXFDO0FBQ2xEO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FDRUgsS0FERixFQUVFQyxRQUFRLENBQUNHLE1BQVQsQ0FBZ0IsQ0FBQ0MsR0FBRCxFQUFNLENBQUNDLEdBQUQsRUFBTTtBQUFFQyxJQUFBQTtBQUFGLEdBQU4sQ0FBTixLQUF5QjtBQUN2Q0YsSUFBQUEsR0FBRyxDQUFDQyxHQUFELENBQUgsR0FBVztBQUNUQyxNQUFBQSxHQUFHLEdBQUc7QUFDSixZQUFJQyxHQUFHLEdBQUcsS0FBS0MsNkJBQUwsRUFBeUJILEdBQXpCLENBQVY7QUFDQSxZQUFJRSxHQUFKLEVBQVMsT0FBT0EsR0FBUDtBQUVULGNBQU1F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b0IsR0FBRyxDQUFDUSxDQUFKLENBQU1FLElBQU4sQ0FBVyxxQkFBSyxDQUFMLENBQVgsRUFBb0JJLFNBQXBCLEVBQVA7QUFDRCxPQUhNOztBQUlQNUIsTUFBQUEsVUFBVSxFQUFFO0FBSkwsS0E5QmtCO0FBb0MzQjZCLElBQUFBLElBQUksRUFBRTtBQUNKZCxNQUFBQSxLQUFLLEVBQUUsU0FBU2MsSUFBVCxHQUFnQjtBQUNyQixlQUFPaEMsTUFBTSxHQUNWMkIsSUFESSxDQUNDLHFCQUFLLENBQUwsQ0FERCxFQUVKSSxTQUZJLEVBQVA7QUFHRCxPQUxHO0FBTUo1QixNQUFBQSxVQUFVLEVBQUU7QUFOUixLQXBDcUI7QUE0QzNCZSxJQUFBQSxLQUFLLEVBQUU7QUFDTHJCLE1BQUFBLEdBQUcsR0FBRztBQUNKLFlBQUksQ0FBQ29CLEdBQUcsQ0FBQ0csT0FBVCxFQUFrQjtBQUNoQixnQkFBTWEsS0FBSyxDQUNULDBFQURTLENBQVg7QUFHRDs7QUFDRCxlQUFPZixLQUFQO0FBQ0QsT0FSSTs7QUFTTGYsTUFBQUEsVUFBVSxFQUFFO0FBVFA7QUE1Q29CLEdBQTdCO0FBeURBLFNBQU9jLEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHY0IGFzIHV1aWQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IHRha2UsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCBjcmVhdGVTdWJqZWN0IGZyb20gJy4vY3JlYXRlLXN1YmplY3QnO1xuaW1wb3J0IHsgT0JTRVJWQUJMRVNfU1lNQk9MLCBFTlNVUkVfU1lNQk9MIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSeERvY3VtZW50KHByb3RvLCB2aWV3c0Fycikge1xuICAvLyBEZWZpbmUgZ2V0dGVycyBmb3Igdmlld3NcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG4gICAgcHJvdG8sXG4gICAgdmlld3NBcnIucmVkdWNlKChhY2MsIFtrZXksIHsgZ2V0IH1dKSA9PiB7XG4gICAgICBhY2Nba2V5XSA9IHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIGxldCBhbnMgPSB0aGlzW09CU0VSVkFCTEVTX1NZTUJPTF1ba2V5XTtcbiAgICAgICAgICBpZiAoYW5zKSByZXR1cm4gYW5zO1xuXG4gICAgICAgICAgY29uc3QgZ2V0T2JzID0gZ2V0LmJpbmQodGhpcyk7XG4gICAgICAgICAgYW5zID0gdGhpc1tPQlNFUlZBQkxFU19TWU1CT0xdW2tleV0gPSBjcmVhdGVWaWV3KGdldE9icyk7XG4gICAgICAgICAgcmV0dXJuIGFucztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pXG4gICk7XG5cbiAgT2JqZWN0LmFzc2lnbihwcm90bywge1xuICAgIFtFTlNVUkVfU1lNQk9MXTogZnVuY3Rpb24gZW5zdXJlKHByb3BlcnR5TmFtZXMpIHtcbiAgICAgIGlmICghcHJvcGVydHlOYW1lcy5sZW5ndGgpIHByb3BlcnR5TmFtZXMgPSB0aGlzLmNvbGxlY3Rpb24uX3ZpZXdzO1xuXG4gICAgICBjb25zdCB1bmVuc3VyZUZucyA9IFtdO1xuICAgICAgcHJvcGVydHlOYW1lcy5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgICAgICB1bmVuc3VyZUZucy5wdXNoKHRoaXNbcHJvcGVydHldW0VOU1VSRV9TWU1CT0xdKCkpO1xuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHVuZW5zdXJlKCkge1xuICAgICAgICB1bmVuc3VyZUZucy5mb3JFYWNoKChmbikgPT4gZm4oKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5lbnN1cmU7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVmlldyhnZXRPYnMpIHtcbiAgY29uc3Qgb2JqID0ge307XG5cbiAgbGV0IHZhbHVlO1xuICBsZXQgb2JzZXJ2YWJsZTtcbiAgbGV0IGVuc3VyZWQgPSBmYWxzZTtcbiAgY29uc3QgZW5zdXJlZElkcyA9IHt9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHtcbiAgICBbRU5TVVJFX1NZTUJPTF06IHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbnN1cmUoKSB7XG4gICAgICAgIGNvbnN0IGlkID0gdXVpZCgpO1xuICAgICAgICBlbnN1cmVkID0gdHJ1ZTtcbiAgICAgICAgZW5zdXJlZElkc1tpZF0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gdW5lbnN1cmUoKSB7XG4gICAgICAgICAgZW5zdXJlZCA9IG51bGw7XG4gICAgICAgICAgZGVsZXRlIGVuc3VyZWRJZHNbaWRdO1xuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIGVuc3VyZWQ6IHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgaWYgKGVuc3VyZWQgPT09IG51bGwpIGVuc3VyZWQgPSBCb29sZWFuKE9iamVjdC5rZXlzKGVuc3VyZWRJZHMpLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBlbnN1cmVkO1xuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgICQ6IHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgaWYgKCFvYnNlcnZhYmxlKSB7XG4gICAgICAgICAgY29uc3Qgb2JzID0gZ2V0T2JzKCkucGlwZSh0YXAoKHJlcykgPT4gb2JqLmVuc3VyZWQgJiYgKHZhbHVlID0gcmVzKSkpO1xuICAgICAgICAgIG9ic2VydmFibGUgPSBjcmVhdGVTdWJqZWN0KG9icywgeyBrZWVwT3BlbkNoZWNrOiAoKSA9PiBvYmouZW5zdXJlZCB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICAgIH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICBwcm9taXNlOiB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBvYmouJC5waXBlKHRha2UoMSkpLnRvUHJvbWlzZSgpO1xuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIGV4ZWM6IHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBleGVjKCkge1xuICAgICAgICByZXR1cm4gZ2V0T2JzKClcbiAgICAgICAgICAucGlwZSh0YWtlKDEpKVxuICAgICAgICAgIC50b1Byb21pc2UoKTtcbiAgICAgIH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICB2YWx1ZToge1xuICAgICAgZ2V0KCkge1xuICAgICAgICBpZiAoIW9iai5lbnN1cmVkKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICAnVHJpZWQgdG8gZ2V0IGFuIHZpZXcgdmFsdWUgZm9yIFJ4RG9jdW1lbnQgbm90IHBhcnQgb2YgYW4gZW5zdXJlJCgpIHF1ZXJ5J1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBvYmo7XG59XG4iXX0=