"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

const options = src => {
  const {
    timestamps
  } = Object.assign({}, src.database.options, src.options);
  if (!timestamps) return false;
  let fields = {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  if (timestamps !== true) {
    fields = Object.assign(fields, timestamps);
  }

  return fields;
};

var _default = {
  rxdb: true,
  prototypes: {
    RxDatabase(proto) {
      const prevCollection = proto.collection;
      Object.assign(proto, {
        async collection(model, ...other) {
          const collection = await prevCollection.call(this, model, other);
          const fields = options(collection);
          if (!fields) return collection; // Register hooks

          collection.preInsert(data => {
            const now = new Date().toISOString();
            if (!data[fields.createdAt]) data[fields.createdAt] = now;
            if (!data[fields.updatedAt]) data[fields.updatedAt] = now;
            return data;
          });
          collection.preSave((data, doc) => {
            data[fields.updatedAt] = new Date().toISOString();
            return data;
          });
          return collection;
        }

      });
    }

  },
  overwritable: {},
  hooks: {
    preCreateRxCollection(model) {
      if (!model.schema || !model.schema.properties) {
        throw Error('RxCollection(s) must have a a "schema" property, with a "properties" key');
      }

      const fields = options(model);
      if (!fields) return model; // Set schema

      if (!model.schema.properties[fields.createdAt]) {
        model.schema.properties[fields.createdAt] = {
          format: 'date-time',
          type: 'string',
          final: true
        };
      }

      if (!model.schema.properties[fields.updatedAt]) {
        model.schema.properties[fields.updatedAt] = {
          format: 'date-time',
          type: 'string'
        };
      }

      model.schema.required = (model.schema.required || []).concat([fields.createdAt, fields.updatedAt]);
      return model;
    }

  }
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90aW1lc3RhbXBzLmpzIl0sIm5hbWVzIjpbIm9wdGlvbnMiLCJzcmMiLCJ0aW1lc3RhbXBzIiwiT2JqZWN0IiwiYXNzaWduIiwiZGF0YWJhc2UiLCJmaWVsZHMiLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJyeGRiIiwicHJvdG90eXBlcyIsIlJ4RGF0YWJhc2UiLCJwcm90byIsInByZXZDb2xsZWN0aW9uIiwiY29sbGVjdGlvbiIsIm1vZGVsIiwib3RoZXIiLCJjYWxsIiwicHJlSW5zZXJ0IiwiZGF0YSIsIm5vdyIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInByZVNhdmUiLCJkb2MiLCJvdmVyd3JpdGFibGUiLCJob29rcyIsInByZUNyZWF0ZVJ4Q29sbGVjdGlvbiIsInNjaGVtYSIsInByb3BlcnRpZXMiLCJFcnJvciIsImZvcm1hdCIsInR5cGUiLCJmaW5hbCIsInJlcXVpcmVkIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTUEsT0FBTyxHQUFJQyxHQUFELElBQVM7QUFDdkIsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQWlCQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSCxHQUFHLENBQUNJLFFBQUosQ0FBYUwsT0FBL0IsRUFBd0NDLEdBQUcsQ0FBQ0QsT0FBNUMsQ0FBdkI7QUFDQSxNQUFJLENBQUNFLFVBQUwsRUFBaUIsT0FBTyxLQUFQO0FBQ2pCLE1BQUlJLE1BQU0sR0FBRztBQUNYQyxJQUFBQSxTQUFTLEVBQUUsV0FEQTtBQUVYQyxJQUFBQSxTQUFTLEVBQUU7QUFGQSxHQUFiOztBQUlBLE1BQUlOLFVBQVUsS0FBSyxJQUFuQixFQUF5QjtBQUN2QkksSUFBQUEsTUFBTSxHQUFHSCxNQUFNLENBQUNDLE1BQVAsQ0FBY0UsTUFBZCxFQUFzQkosVUFBdEIsQ0FBVDtBQUNEOztBQUNELFNBQU9JLE1BQVA7QUFDRCxDQVhEOztlQWFlO0FBQ2JHLEVBQUFBLElBQUksRUFBRSxJQURPO0FBRWJDLEVB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QUMzRDdCLE1BQU0sQ0FBQ0MsU0FEb0QsRUFFM0RELE1BQU0sQ0FBQ0UsU0FGb0QsQ0FBckMsQ0FBeEI7QUFLQSxhQUFPTyxLQUFQO0FBQ0Q7O0FBaENJO0FBaENNLEMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBvcHRpb25zID0gKHNyYykgPT4ge1xuICBjb25zdCB7IHRpbWVzdGFtcHMgfSA9IE9iamVjdC5hc3NpZ24oe30sIHNyYy5kYXRhYmFzZS5vcHRpb25zLCBzcmMub3B0aW9ucyk7XG4gIGlmICghdGltZXN0YW1wcykgcmV0dXJuIGZhbHNlO1xuICBsZXQgZmllbGRzID0ge1xuICAgIGNyZWF0ZWRBdDogJ2NyZWF0ZWRBdCcsXG4gICAgdXBkYXRlZEF0OiAndXBkYXRlZEF0J1xuICB9O1xuICBpZiAodGltZXN0YW1wcyAhPT0gdHJ1ZSkge1xuICAgIGZpZWxkcyA9IE9iamVjdC5hc3NpZ24oZmllbGRzLCB0aW1lc3RhbXBzKTtcbiAgfVxuICByZXR1cm4gZmllbGRzO1xufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICByeGRiOiB0cnVlLFxuICBwcm90b3R5cGVzOiB7XG4gICAgUnhEYXRhYmFzZShwcm90bykge1xuICAgICAgY29uc3QgcHJldkNvbGxlY3Rpb24gPSBwcm90by5jb2xsZWN0aW9uO1xuICAgICAgT2JqZWN0LmFzc2lnbihwcm90bywge1xuICAgICAgICBhc3luYyBjb2xsZWN0aW9uKG1vZGVsLCAuLi5vdGhlcikge1xuICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBhd2FpdCBwcmV2Q29sbGVjdGlvbi5jYWxsKHRoaXMsIG1vZGVsLCBvdGhlcik7XG5cbiAgICAgICAgICBjb25zdCBmaWVsZHMgPSBvcHRpb25zKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIGlmICghZmllbGRzKSByZXR1cm4gY29sbGVjdGlvbjtcblxuICAgICAgICAgIC8vIFJlZ2lzdGVyIGhvb2tzXG4gICAgICAgICAgY29sbGVjdGlvbi5wcmVJbnNlcnQoKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmICghZGF0YVtmaWVsZHMuY3JlYXRlZEF0XSkgZGF0YVtmaWVsZHMuY3JlYXRlZEF0XSA9IG5vdztcbiAgICAgICAgICAgIGlmICghZGF0YVtmaWVsZHMudXBkYXRlZEF0XSkgZGF0YVtmaWVsZHMudXBkYXRlZEF0XSA9IG5vdztcblxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjb2xsZWN0aW9uLnByZVNhdmUoKGRhdGEsIGRvYykgPT4ge1xuICAgICAgICAgICAgZGF0YVtmaWVsZHMudXBkYXRlZEF0XSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgb3ZlcndyaXRhYmxlOiB7fSxcbiAgaG9va3M6IHtcbiAgICBwcmVDcmVhdGVSeENvbGxlY3Rpb24obW9kZWwpIHtcbiAgICAgIGlmICghbW9kZWwuc2NoZW1hIHx8ICFtb2RlbC5zY2hlbWEucHJvcGVydGllcykge1xuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICAnUnhDb2xsZWN0aW9uKHMpIG11c3QgaGF2ZSBhIGEgXCJzY2hlbWFcIiBwcm9wZXJ0eSwgd2l0aCBhIFwicHJvcGVydGllc1wiIGtleSdcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZmllbGRzID0gb3B0aW9ucyhtb2RlbCk7XG4gICAgICBpZiAoIWZpZWxkcykgcmV0dXJuIG1vZGVsO1xuXG4gICAgICAvLyBTZXQgc2NoZW1hXG4gICAgICBpZiAoIW1vZGVsLnNjaGVtYS5wcm9wZXJ0aWVzW2ZpZWxkcy5jcmVhdGVkQXRdKSB7XG4gICAgICAgIG1vZGVsLnNjaGVtYS5wcm9wZXJ0aWVzW2ZpZWxkcy5jcmVhdGVkQXRdID0ge1xuICAgICAgICAgIGZvcm1hdDogJ2RhdGUtdGltZScsXG4gICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgZmluYWw6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICghbW9kZWwuc2NoZW1hLnByb3BlcnRpZXNbZmllbGRzLnVwZGF0ZWRBdF0pIHtcbiAgICAgICAgbW9kZWwuc2NoZW1hLnByb3BlcnRpZXNbZmllbGRzLnVwZGF0ZWRBdF0gPSB7XG4gICAgICAgICAgZm9ybWF0OiAnZGF0ZS10aW1lJyxcbiAgICAgICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBtb2RlbC5zY2hlbWEucmVxdWlyZWQgPSAobW9kZWwuc2NoZW1hLnJlcXVpcmVkIHx8IFtdKS5jb25jYXQoW1xuICAgICAgICBmaWVsZHMuY3JlYXRlZEF0LFxuICAgICAgICBmaWVsZHMudXBkYXRlZEF0XG4gICAgICBdKTtcblxuICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH1cbiAgfVxufTtcbiJdfQ==