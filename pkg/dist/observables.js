"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _default = {
  rxdb: true,
  prototypes: {},
  overwritable: {},
  hooks: {
    createRxCollection(collection) {
      const {
        options
      } = collection;
      if (!options || !options.observables) return;
      const getters = Object.entries(options.observables).reduce((acc, [key, value]) => {
        let $, get;

        if (typeof value === 'function') {
          $ = value;
        } else {
          $ = value.$;
          get = value.get;
        }

        function observableMethod(...args) {
          // eslint-disable-next-line babel/no-invalid-this
          const obs = $.apply(this, args);
          let piping;

          if (get) {
            piping = (0, _operators.switchMap)(obj => {
              // eslint-disable-next-line babel/no-invalid-this
              const res = get.call(this, obj);
              return res.then ? (0, _rxjs.from)(res) : (0, _rxjs.of)(res);
            });
          }

          return {
            $: get ? obs.pipe(piping) : obs,
            exec: () => {
              return obs.pipe((0, _operators.take)(1), get ? piping : x => x).toPromise();
            }
          };
        }

        acc[key] = {
          get() {
            const method = observableMethod.bind(this);
            method.get = get ? get.bind(this) : undefined;
            return method;
          },

          enumerable: true
        };
        return acc;
      }, {});
      const proto = collection.getDocumentPrototype();
      Object.defineProperties(proto, getters);
    }

  }
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYnNlcnZhYmxlcy5qcyJdLCJuYW1lcyI6WyJyeGRiIiwicHJvdG90eXBlcyIsIm92ZXJ3cml0YWJsZSIsImhvb2tzIiwiY3JlYXRlUnhDb2xsZWN0aW9uIiwiY29sbGVjdGlvbiIsIm9wdGlvbnMiLCJvYnNlcnZhYmxlcyIsImdldHRlcnMiLCJPYmplY3QiLCJlbnRyaWVzIiwicmVkdWNlIiwiYWNjIiwia2V5IiwidmFsdWUiLCIkIiwiZ2V0Iiwib2JzZXJ2YWJsZU1ldGhvZCIsImFyZ3MiLCJvYnMiLCJhcHBseSIsInBpcGluZyIsIm9iaiIsInJlcyIsImNhbGwiLCJ0aGVuIiwicGlwZSIsImV4ZWMiLCJ4IiwidG9Qcm9taXNlIiwibWV0aG9kIiwiYmluZCIsInVuZGVmaW5lZCIsImVudW1lcmFibGUiLCJwcm90byIsImdldERvY3VtZW50UHJvdG90eXBlIiwiZGVmaW5lUHJvcGVydGllcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztlQUVlO0FBQ2JBLEVBQUFBLElBQUksRUFBRSxJQURPO0FBRWJDLEVBQUFBLFVBQVUsRUFBRSxFQUZDO0FBR2JDLEVBQUFBLFlBQVksRUFBRSxFQUhEO0FBSWJDLEVBQUFBLEtBQUssRUFBRTtBQUNMQyxJQUFBQSxrQkFBa0IsQ0FBQ0MsVUFBRCxFQUFhO0FBQzdCLFlBQU07QUFBRUMsUUFBQUE7QUFBRixVQUFjRCxVQUFwQjtBQUNBLFVBQUksQ0FBQ0MsT0FBRCxJQUFZLENBQUNBLE9BQU8sQ0FBQ0MsV0FBekIsRUFBc0M7QUFFdEMsWUFBTUMsT0FBTyxHQUFHQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUosT0FBTyxDQUFDQyxXQUF2QixFQUFvQ0ksTUFBcEMsQ0FDZCxDQUFDQyxHQUFELEVBQU0sQ0FBQ0MsR0FBRCxFQUFNQyxLQUFOLENBQU4sS0FBdUI7QUFDckIsWUFBSUMsQ0FBSixFQUFPQyxHQUFQOztBQUNBLFlBQUksT0FBT0YsS0FBUCxLQUFpQixVQUFyQixFQUFpQztBQUMvQkMsVUFBQUEsQ0FBQyxHQUFHRCxLQUFKO0FBQ0QsU0FGRCxNQUVPO0FBQ0xDLFVBQUFBLENBQUMsR0FBR0QsS0FBSyxDQUFDQyxDQUFWO0FBQ0FDLFVBQUFBLEdBQUcsR0FBR0YsS0FBSyxDQUFDRSxHQUFaO0FBQ0Q7O0FBRUQsaUJBQVNDLGdCQUFULENBQTBCLEdBQUdDLElBQTdCLEVBQW1DO0FBQ2pDO0FBQ0EsZ0JBQU1DLEdBQUcsR0FBR0osQ0FBQyxDQUFDSyxLQUFGLENBQVEsSUFBUixFQUFjRixJQUFkLENBQVo7QUFFQSxjQUFJRyxNQUFKOztBQUNBLGNBQUlMLEdBQUosRUFBUztBQUNQSyxZQUFBQSxNQUFNLEdBQUcsMEJBQVdDLEdBQUQsSUFBUztBQUMxQjtBQUNBLG9CQUFNQyxHQUFHLEdBQUdQLEdBQUcsQ0FBQ1EsSUFBSixDQUFTLElBQVQsRUFBZUYsR0FBZixDQUFaO0FBQ0EscUJBQU9DLEdBQUcsQ0FBQ0UsSUFBSixHQUFXLGdCQUFLRixHQUFMLENBQVgsR0FBdUIsY0FBR0EsR0FBSCxDQUE5QjtBQUNELGFBSlEsQ0FBVDtBQUtEOztBQUNELGlCQUFPO0FBQ0xSLFlBQUFBLENBQUMsRUFBRUMsR0FBRyxHQUFHRyxHQUFHLENBQUNPLElBQUosQ0FBU0wsTUFBVCxDQUFILEdBQXNCRixHQUR2QjtBQUVMUSxZQUFBQSxJQUFJLEVBQUUsTUFBTTtBQUNWLHFCQUFPUixHQUFHLENBQUNPLElBQUosQ0FBUyxxQkFBSyxDQUFMLENBQVQsRUFBa0JWLEdBQUcsR0FBR0ssTUFBSCxHQUFhTyxDQUFELElBQU9BLENBQXhDLEVBQTJDQyxTQUEzQyxFQUFQO0FBQ0Q7QUFKSSxXQUFQO0FBTUQ7O0FBRURqQixRQUFBQSxHQUFHLENBQUNDLEdBQUQsQ0FBSCxHQUFXO0FBQ1RHLFVBQUFBLEdBQUcsR0FBRztBQUNKLGtCQUFNYyxNQUFNLEdBQUdiLGdCQUFnQixDQUFDYyxJQUFqQixDQUFzQixJQUF0QixDQUFmO0FBQ0FELFlBQUFBLE1BQU0sQ0FBQ2QsR0FBUCxHQUFhQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ2UsSUFBSixDQUFTLElBQVQsQ0FBSCxHQUFvQkMsU0FBcEM7QUFDQSxtQkFBT0YsTUFBUDtBQUNELFdBTFE7O0FBTVRHLFVBQUFBLFVBQVUsRUFBRTtBQU5ILFNBQVg7QUFRQSxlQUFPckIsR0FBUDtBQUNELE9BdkNhLEVBd0NkLEVBeENjLENBQWhCO0FBMkNBLFlBQU1zQixLQUFLLEdBQUc3QixVQUFVLENBQUM4QixvQkFBWCxFQUFkO0FBQ0ExQixNQUFBQSxNQUFNLENBQUMyQixnQkFBUCxDQUF3QkYsS0FBeEIsRUFBK0IxQixPQUEvQjtBQUNEOztBQWxESTtBQUpNLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZSwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJ4ZGI6IHRydWUsXG4gIHByb3RvdHlwZXM6IHt9LFxuICBvdmVyd3JpdGFibGU6IHt9LFxuICBob29rczoge1xuICAgIGNyZWF0ZVJ4Q29sbGVjdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IGNvbGxlY3Rpb247XG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMub2JzZXJ2YWJsZXMpIHJldHVybjtcblxuICAgICAgY29uc3QgZ2V0dGVycyA9IE9iamVjdC5lbnRyaWVzKG9wdGlvbnMub2JzZXJ2YWJsZXMpLnJlZHVjZShcbiAgICAgICAgKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgbGV0ICQsIGdldDtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAkID0gdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQgPSB2YWx1ZS4kO1xuICAgICAgICAgICAgZ2V0ID0gdmFsdWUuZ2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIG9ic2VydmFibGVNZXRob2QoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGJhYmVsL25vLWludmFsaWQtdGhpc1xuICAgICAgICAgICAgY29uc3Qgb2JzID0gJC5hcHBseSh0aGlzLCBhcmdzKTtcblxuICAgICAgICAgICAgbGV0IHBpcGluZztcbiAgICAgICAgICAgIGlmIChnZXQpIHtcbiAgICAgICAgICAgICAgcGlwaW5nID0gc3dpdGNoTWFwKChvYmopID0+IHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYmFiZWwvbm8taW52YWxpZC10aGlzXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gZ2V0LmNhbGwodGhpcywgb2JqKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnRoZW4gPyBmcm9tKHJlcykgOiBvZihyZXMpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICQ6IGdldCA/IG9icy5waXBlKHBpcGluZykgOiBvYnMsXG4gICAgICAgICAgICAgIGV4ZWM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JzLnBpcGUodGFrZSgxKSwgZ2V0ID8gcGlwaW5nIDogKHgpID0+IHgpLnRvUHJvbWlzZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFjY1trZXldID0ge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICBjb25zdCBtZXRob2QgPSBvYnNlcnZhYmxlTWV0aG9kLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgIG1ldGhvZC5nZXQgPSBnZXQgPyBnZXQuYmluZCh0aGlzKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgcmV0dXJuIG1ldGhvZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LFxuICAgICAgICB7fVxuICAgICAgKTtcblxuICAgICAgY29uc3QgcHJvdG8gPSBjb2xsZWN0aW9uLmdldERvY3VtZW50UHJvdG90eXBlKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhwcm90bywgZ2V0dGVycyk7XG4gICAgfVxuICB9XG59O1xuIl19